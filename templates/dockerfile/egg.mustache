#基础镜像，这里选择的这个node 是因为build之后占用空间没有那么大
FROM base-node:1.0.0

# 指定用户权限
USER root

# 指定制作我们的镜像的联系人信息（镜像创建者）
# MAINTAINER 

# 建立基础文件目录
RUN mkdir -p /workspace/web/egg-demo && mkdir -p /workspace/config 
RUN echo $HOME 

# 设置工作目录
WORKDIR /workspace/web/{{name}}

# 设置环境变量
ENV DYD_CONFIG_PATH /workspace/config
ENV DYD_WORKSPACE_PATH /workspace
ENV DYD_RUNTIME_ENV {{env}}

# 拷贝package.json文件到工作目录
# !!重要：package.json需要单独添加。
# Docker在构建镜像的时候，是一层一层构建的，仅当这一层有变化时，重新构建对应的层。
# 如果package.json和源代码一起添加到镜像，则每次修改源码都需要重新安装npm模块，这样木有必要。
# 所以，正确的顺序是: 添加package.json；安装npm模块；添加源代码。
COPY package.json  /workspace/web/{{name}}/package.json
RUN npm i --registry=https://registry.npm.taobao.org

# 添加文件到工作目录下
ADD ./ /workspace/web/{{name}}/

# 复制工具的配置文件、代码，并且全局安装
RUN mkdir -p ~/.cmd-tool/config
RUN mkdir -p ~/cmd-tool
ADD tempDir/toolConfig/index.js  /root/.cmd-tool/config/index.js
ADD tempDir/cmd-tool/package.json /root/cmd-tool/package.json
RUN cd ~/cmd-tool && ls -l && npm i --registry=https://registry.npm.taobao.org
ADD tempDir/cmd-tool/ /root/cmd-tool
RUN cd /root/cmd-tool && npm i . -g && dydcmd -h

# 容器对外暴露的端口号
EXPOSE {{port}}

# 容器启动时执行的命令，类似npm run start
CMD dydcmd pull-config && npm start -- --port={{port}}